{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","Hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","cat","ReactDOM","render","document","getElementById"],"mappings":"6MA8BeA,EA3BK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,KAAjBC,WACAC,mBAAS,KADQ,mBAC9CC,EAD8C,KAClCC,EADkC,KAgBrD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCKZG,EAVK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEhC,OADAC,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,0CACb,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAIA,K,uBCPGO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfR,EADe,iDACiCS,UACpDF,GAFmB,+DAIEG,MAAMV,GAJR,cAIfW,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAXjB,kBAedc,GAfc,4CAAH,sDCsBLK,EAlBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdvB,mBAAS,CACjC6B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,EDb2BK,CAAanB,GAAjCU,EADkB,EACxBJ,KAAcO,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIjB,UAAU,qCAAd,IAAoDI,EAApD,KAECa,GAAW,uBAAGjB,UAAU,4BAAb,YAEZ,yBAAKA,UAAU,aACZc,EAAOF,KAAI,SAACC,GACX,OAAO,kBAAC,EAAD,eAAaW,IAAKX,EAAIlB,IAAQkB,UEYhCY,EAvBM,WAAM,MAEW5C,mBAAS,IAFpB,mBAElBD,EAFkB,KAEND,EAFM,KAQzB,OACE,6BACE,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACGC,EAAWgC,KAAI,SAACc,GACf,OAAO,kBAAC,EAAD,CAASF,IAAKE,EAAKtB,SAAUsB,UCf9CC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.bad9e8ce.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories, categories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  console.log(title);\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category,\r\n  )}&limit=10&api_key=jxJnfGhXdsl7QQeoIPAB0ziax9Cr00ch`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'> {category} </h3>\r\n\r\n      {loading && <p className='animate__animated__flash'>Cargando</p>}\r\n\r\n      <div className='card-grid'>\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      }),\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  //   const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  //   const handleAdd = () => {\r\n  //     setCategories([...categories, \"Death Note\"]);\r\n  //   };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((cat) => {\r\n          return <GifGrid key={cat} category={cat} />;\r\n        })}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./components/GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}